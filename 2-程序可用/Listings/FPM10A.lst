C51 COMPILER V9.54   FPM10A                                                                10/21/2022 21:40:55 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE FPM10A
OBJECT MODULE PLACED IN .\Objects\FPM10A.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE FPM10A.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\FP
                    -M10A.lst) TABS(2) OBJECT(.\Objects\FPM10A.obj)

line level    source

   1          #include "head.h"
   2          
   3          extern u8 KeyValue;
   4          extern char fla;
   5          
   6          volatile unsigned char FPM10A_RECEICE_BUFFER[32];
   7          unsigned int finger_id = 0;
   8          
   9          //FINGERPRINTÍ¨ÐÅÐ­Òé¶¨Òå
  10          
  11          code unsigned char FPM10A_Get_Device[10] ={0x01,0x00,0x07,0x13,0x00,0x00,0x00,0x00,0x00,0x1b};//¿ÚÁîÑéÖ¤
  12          code unsigned char FPM10A_Pack_Head[6] = {0xEF,0x01,0xFF,0xFF,0xFF,0xFF};  //Ð­Òé°üÍ·
  13          code unsigned char FPM10A_Get_Img[6] = {0x01,0x00,0x03,0x01,0x00,0x05};    //»ñµÃÖ¸ÎÆÍ¼Ïñ
  14          code unsigned char FPM10A_Get_Templete_Count[6] ={0x01,0x00,0x03,0x1D,0x00,0x21 }; //»ñµÃÄ£°æ×ÜÊý
  15          code unsigned char FPM10A_Search[11]={0x01,0x00,0x08,0x04,0x01,0x00,0x00,0x03,0xE7,0x00,0xF8}; //ËÑË÷Ö¸ÎÆË
             -ÑË÷·¶Î§0 - 999,Ê¹ÓÃBUFFER1ÖÐµÄÌØÕ÷ÂëËÑË÷
  16          code unsigned char FPM10A_Search_0_9[11]={0x01,0x00,0x08,0x04,0x01,0x00,0x00,0x00,0x13,0x00,0x21}; //ËÑË÷0
             --9ºÅÖ¸ÎÆ
  17          code unsigned char FPM10A_Img_To_Buffer1[7]={0x01,0x00,0x04,0x02,0x01,0x00,0x08}; //½«Í¼Ïñ·ÅÈëµ½BUFFER1
  18          code unsigned char FPM10A_Img_To_Buffer2[7]={0x01,0x00,0x04,0x02,0x02,0x00,0x09}; //½«Í¼Ïñ·ÅÈëµ½BUFFER2
  19          code unsigned char FPM10A_Reg_Model[6]={0x01,0x00,0x03,0x05,0x00,0x09}; //½«BUFFER1¸úBUFFER2ºÏ³ÉÌØÕ÷Ä£°æ
  20          code unsigned char FPM10A_Delete_All_Model[6]={0x01,0x00,0x03,0x0d,0x00,0x11};//É¾³ýÖ¸ÎÆÄ£¿éÀïËùÓÐµÄÄ£°æ
  21          volatile unsigned char  FPM10A_Save_Finger[9]={0x01,0x00,0x06,0x06,0x01,0x00,0x0B,0x00,0x19};//½«BUFFER1ÖÐ
             -µÄÌØÕ÷Âë´æ·Åµ½Ö¸¶¨µÄÎ»ÖÃ
  22          //volatile:ÏµÍ³×ÜÊÇÖØÐÂ´ÓËüËùÔÚµÄÄÚ´æ¶ÁÈ¡Êý¾Ý£¬¼´Ê¹ËüÇ°ÃæµÄÖ¸Áî¸Õ¸Õ´Ó¸Ã´¦¶ÁÈ¡¹ýÊý¾Ý
  23          /*------------------ FINGERPRINTÃüÁî×Ö --------------------------*/
  24           //·¢ËÍ°üÍ·
  25          void FPM10A_Cmd_Send_Pack_Head(void)
  26          {
  27   1        int i;  
  28   1        for(i=0;i<6;i++) //°üÍ·
  29   1         {
  30   2           Uart_Send_Byte(FPM10A_Pack_Head[i]);   
  31   2          }   
  32   1      }
  33          //·¢ËÍÖ¸Áî
  34          void FPM10A_Cmd_Check(void)
  35          {
  36   1        int i=0;
  37   1        FPM10A_Cmd_Send_Pack_Head(); //·¢ËÍÍ¨ÐÅÐ­Òé°üÍ·
  38   1        for(i=0;i<10;i++)
  39   1         {    
  40   2          Uart_Send_Byte(FPM10A_Get_Device[i]);
  41   2          }
  42   1      }
  43          //½ÓÊÕ·´À¡Êý¾Ý»º³å
  44          void FPM10A_Receive_Data(unsigned char ucLength)
  45          {
  46   1        unsigned char i;
  47   1      
  48   1        for (i=0;i<ucLength;i++)
  49   1           FPM10A_RECEICE_BUFFER[i] = Uart_Receive_Byte();
  50   1      
  51   1      }
C51 COMPILER V9.54   FPM10A                                                                10/21/2022 21:40:55 PAGE 2   

  52          
  53          //FINGERPRINT_»ñµÃÖ¸ÎÆÍ¼ÏñÃüÁî
  54          void FPM10A_Cmd_Get_Img(void)
  55          {
  56   1          unsigned char i;
  57   1          FPM10A_Cmd_Send_Pack_Head(); //·¢ËÍÍ¨ÐÅÐ­Òé°üÍ·
  58   1          for(i=0;i<6;i++) //·¢ËÍÃüÁî 0x1d
  59   1        {
  60   2             Uart_Send_Byte(FPM10A_Get_Img[i]);
  61   2        }
  62   1      }
  63          //½²Í¼Ïñ×ª»»³ÉÌØÕ÷Âë´æ·ÅÔÚBuffer1ÖÐ
  64          void FINGERPRINT_Cmd_Img_To_Buffer1(void)
  65          {
  66   1        unsigned char i;
  67   1        FPM10A_Cmd_Send_Pack_Head(); //·¢ËÍÍ¨ÐÅÐ­Òé°üÍ·      
  68   1          for(i=0;i<7;i++)   //·¢ËÍÃüÁî ½«Í¼Ïñ×ª»»³É ÌØÕ÷Âë ´æ·ÅÔÚ CHAR_buffer1
  69   1           {
  70   2            Uart_Send_Byte(FPM10A_Img_To_Buffer1[i]);
  71   2            }
  72   1      }
  73          //½«Í¼Ïñ×ª»»³ÉÌØÕ÷Âë´æ·ÅÔÚBuffer2ÖÐ
  74          void FINGERPRINT_Cmd_Img_To_Buffer2(void)
  75          {
  76   1           unsigned char i;
  77   1           for(i=0;i<6;i++)    //·¢ËÍ°üÍ·
  78   1         {
  79   2            Uart_Send_Byte(FPM10A_Pack_Head[i]);   
  80   2           }
  81   1           for(i=0;i<7;i++)   //·¢ËÍÃüÁî ½«Í¼Ïñ×ª»»³É ÌØÕ÷Âë ´æ·ÅÔÚ CHAR_buffer1
  82   1            {
  83   2              Uart_Send_Byte(FPM10A_Img_To_Buffer2[i]);
  84   2            }
  85   1      }
  86          //ËÑË÷È«²¿ÓÃ»§999Ã¶
  87          void FPM10A_Cmd_Search_Finger(void)
  88          {
  89   1             unsigned char i;         
  90   1             FPM10A_Cmd_Send_Pack_Head(); //·¢ËÍÍ¨ÐÅÐ­Òé°üÍ·
  91   1             for(i=0;i<11;i++)
  92   1                 {
  93   2                  Uart_Send_Byte(FPM10A_Search[i]);   
  94   2               }
  95   1      }
  96          
  97          void FPM10A_Cmd_Reg_Model(void)
  98          {
  99   1             unsigned char i;    
 100   1            
 101   1             FPM10A_Cmd_Send_Pack_Head(); //·¢ËÍÍ¨ÐÅÐ­Òé°üÍ·
 102   1      
 103   1             for(i=0;i<6;i++)
 104   1                 {
 105   2                  Uart_Send_Byte(FPM10A_Reg_Model[i]);   
 106   2               }
 107   1      
 108   1      
 109   1      }
 110          //É¾³ýÖ¸ÎÆÄ£¿éÀïµÄËùÓÐÖ¸ÎÆÄ£°æ
 111          void FINGERPRINT_Cmd_Delete_All_Model(void)
 112          {
 113   1           unsigned char i;    
C51 COMPILER V9.54   FPM10A                                                                10/21/2022 21:40:55 PAGE 3   

 114   1          for(i=0;i<6;i++) //°üÍ·
 115   1            Uart_Send_Byte(FPM10A_Pack_Head[i]);   
 116   1          for(i=0;i<6;i++) //ÃüÁîºÏ²¢Ö¸ÎÆÄ£°æ
 117   1           {
 118   2            Uart_Send_Byte(FPM10A_Delete_All_Model[i]);   
 119   2           }  
 120   1      }
 121          //±£´æÖ¸ÎÆ
 122          void FPM10A_Cmd_Save_Finger( unsigned int storeID )
 123          {
 124   1             unsigned long temp = 0;
 125   1             unsigned char i;
 126   1             FPM10A_Save_Finger[5] =(storeID&0xFF00)>>8;
 127   1             FPM10A_Save_Finger[6] = (storeID&0x00FF);
 128   1             for(i=0;i<7;i++)   //¼ÆËãÐ£ÑéºÍ
 129   1                 temp = temp + FPM10A_Save_Finger[i]; 
 130   1             FPM10A_Save_Finger[7]=(temp & 0x00FF00) >> 8; //´æ·ÅÐ£ÑéÊý¾Ý
 131   1             FPM10A_Save_Finger[8]= temp & 0x0000FF;       
 132   1             FPM10A_Cmd_Send_Pack_Head(); //·¢ËÍÍ¨ÐÅÐ­Òé°üÍ·  
 133   1             for(i=0;i<9;i++)  
 134   1                Uart_Send_Byte(FPM10A_Save_Finger[i]);      //·¢ËÍÃüÁî ½«Í¼Ïñ×ª»»³É ÌØÕ÷Âë ´æ·ÅÔÚ CHAR_buffer1
 135   1      }
 136          //Ìí¼ÓÖ¸ÎÆ
 137          void FPM10A_Add_Fingerprint()
 138          {
 139   1      
 140   1        finger_id=0;  
 141   1        while(1)
 142   1        {
 143   2          LCD_ShowString(1,1," Add  Finger    ");
 144   2          LCD_ShowString(2,1," ID is          ");
 145   2          //°´·µ»Ø¼üÖ±½Ó»Øµ½Ö÷²Ëµ¥
 146   2          if(KeyValue == 4 && fla == 0) 
 147   2          {
 148   3             fla = -1;
 149   3             break;
 150   3          }
 151   2      
 152   2          //°´ÇÐ»»¼üÖ¸ÎÆiDÖµ¼Ó1
 153   2          if(KeyValue == 12 && fla == 0)
 154   2          {
 155   3            fla = -1;
 156   3            if(finger_id == 1000)
 157   3            {
 158   4              finger_id = 0;
 159   4            }
 160   3            else
 161   3            finger_id = finger_id + 1;
 162   3          }
 163   2      
 164   2           //Ö¸ÎÆiDÖµÏÔÊ¾´¦Àí 
 165   2            LCD_ShowNum(2,8,finger_id,3);
 166   2      
 167   2           //°´È·ÈÏ¼ü¿ªÊ¼Â¼ÈëÖ¸ÎÆÐÅÏ¢           
 168   2           if(KeyValue == 8 && fla == 0)
 169   2            { 
 170   3                fla = -1;
 171   3                LCD1602_Display(0x80," Please  finger ",0,16);
 172   3                LCD1602_Display(0xc0,"                ",0,16);
 173   3              while(1)
 174   3               {
 175   4                //°´ÏÂ·µ»Ø¼üÍË³öÂ¼Èë·µ»ØfingerIDµ÷Õû×´Ì¬   
C51 COMPILER V9.54   FPM10A                                                                10/21/2022 21:40:55 PAGE 4   

 176   4                if(KeyValue == 4 && fla == 0) 
 177   4                 {
 178   5                  fla = -1;
 179   5                  break;
 180   5                  }
 181   4                FPM10A_Cmd_Get_Img(); //»ñµÃÖ¸ÎÆÍ¼Ïñ
 182   4                FPM10A_Receive_Data(12);
 183   4                //ÅÐ¶Ï½ÓÊÕµ½µÄÈ·ÈÏÂë,µÈÓÚ0Ö¸ÎÆ»ñÈ¡³É¹¦
 184   4                if(FPM10A_RECEICE_BUFFER[9]==0)
 185   4                 {
 186   5                  delay_1ms(100);
 187   5                  FINGERPRINT_Cmd_Img_To_Buffer1();
 188   5                    FPM10A_Receive_Data(12);
 189   5                  LCD1602_Display(0x80,"Successful entry",0,16);
 190   5                  delay_1ms(1000);
 191   5                  LCD1602_Display(0x80," Please  finger ",0,16);
 192   5                    LCD1602_Display(0xc0,"                ",0,16);
 193   5                  while(1)
 194   5                  {
 195   6                    if(KeyValue == 4 && fla == 0) 
 196   6                    {
 197   7                      fla = -1;
 198   7                      break;
 199   7                    }
 200   6                   FPM10A_Cmd_Get_Img(); //»ñµÃÖ¸ÎÆÍ¼Ïñ
 201   6                   FPM10A_Receive_Data(12);
 202   6                  //ÅÐ¶Ï½ÓÊÕµ½µÄÈ·ÈÏÂë,µÈÓÚ0Ö¸ÎÆ»ñÈ¡³É¹¦
 203   6                  if(FPM10A_RECEICE_BUFFER[9]==0)
 204   6                  {
 205   7                    delay_1ms(200);
 206   7                    LCD1602_Display(0x80,"Successful entry",0,16);
 207   7                    LCD1602_Display(0xc0,"    ID is       ",0,16);
 208   7                     //Ö¸ÎÆiDÖµÏÔÊ¾´¦Àí 
 209   7                     LCD1602_WriteCMD(0xc0+10);
 210   7                     LCD1602_WriteDAT(finger_id/100+48);
 211   7                     LCD1602_WriteDAT(finger_id%100/10+48);
 212   7                     LCD1602_WriteDAT(finger_id%100%10+48);
 213   7                    FINGERPRINT_Cmd_Img_To_Buffer2();
 214   7                      FPM10A_Receive_Data(12);
 215   7                    FPM10A_Cmd_Reg_Model();//×ª»»³ÉÌØÕ÷Âë
 216   7                        FPM10A_Receive_Data(12); 
 217   7                      FPM10A_Cmd_Save_Finger(finger_id);                             
 218   7                          FPM10A_Receive_Data(12);
 219   7                    delay_1ms(1000);
 220   7                    finger_id=finger_id+1;
 221   7                      break;
 222   7                    }
 223   6                   }
 224   5                   
 225   5                      break;
 226   5                  }
 227   4                }
 228   3      //      ClrScreen(); //Çå¿ÕÏÔÊ¾ÆÁ
 229   3            }
 230   2          //  Delay_Ms(500);
 231   2          }
 232   1      }
 233          
 234          //ËÑË÷Ö¸ÎÆ
 235          void FPM10A_Find_Fingerprint()
 236          {
 237   1        unsigned int find_fingerid = 0;
C51 COMPILER V9.54   FPM10A                                                                10/21/2022 21:40:55 PAGE 5   

 238   1        while(1)
 239   1        {
 240   2          if(KeyValue == 4 && fla == 0)  //ÍË³ö°´¼ü
 241   2          {
 242   3            fla = -1;
 243   3            break;
 244   3          }
 245   2          LCD_ShowString(1,1," Search  finger ");
 246   2          LCD_ShowString(2,1,"                ");
 247   2          FPM10A_Cmd_Get_Img(); //»ñµÃÖ¸ÎÆÍ¼Ïñ
 248   2          FPM10A_Receive_Data(12);    //»º³å
 249   2          //ÅÐ¶Ï½ÓÊÕµ½µÄÈ·ÈÏÂë,µÈÓÚ0Ö¸ÎÆ»ñÈ¡³É¹¦
 250   2          if(FPM10A_RECEICE_BUFFER[9]==0)
 251   2          {         
 252   3            delay_1ms(100);
 253   3            FINGERPRINT_Cmd_Img_To_Buffer1();
 254   3            FPM10A_Receive_Data(12);    
 255   3            FPM10A_Cmd_Search_Finger();
 256   3            FPM10A_Receive_Data(16);      
 257   3            if(FPM10A_RECEICE_BUFFER[9] == 0) //ËÑË÷µ½  
 258   3            {
 259   4              LCD_ShowString(1,1," Search success ");
 260   4              LCD_ShowString(2,1," ID is       ");
 261   4              
 262   4              //Æ´½ÓÖ¸ÎÆIDÊý
 263   4              find_fingerid = FPM10A_RECEICE_BUFFER[10]*256 + FPM10A_RECEICE_BUFFER[11];          
 264   4              //Ö¸ÎÆiDÖµÏÔÊ¾´¦Àí 
 265   4              LCD_ShowNum(2,8,find_fingerid,3);
 266   4              open_door();//¿ªËø
 267   4              delay_1ms(1000);  
 268   4              }
 269   3              else //Ã»ÓÐÕÒµ½
 270   3              {
 271   4                LCD_ShowString(1,1," Search  failed ");
 272   4                LCD_ShowString(2,1,"                ");
 273   4                delay_1ms(3000);  
 274   4              }
 275   3            }   
 276   2          }
 277   1      }
 278          //É¾³ýËùÓÐ´æÖüµÄÖ¸ÎÆ¿â
 279          void FPM10A_Delete_All_Fingerprint()
 280          {
 281   1          unsigned char i=0;
 282   1          LCD_ShowString(1,1,"===Delet All====");
 283   1          LCD_ShowString(2,1,"   Yes or No ?  ");
 284   1          while(1)
 285   1          {
 286   2            if(KeyValue == 4 && fla == 0)
 287   2            {
 288   3              fla = -1;
 289   3              break;
 290   3            }
 291   2            if(KeyValue == 8 && fla == 0)
 292   2            {
 293   3              fla = -1;
 294   3              LCD_ShowString(1,1,"====Waiting=====");
 295   3              LCD_ShowString(2,1,"                ");
 296   3              delay_1ms(300);
 297   3              
 298   3              FINGERPRINT_Cmd_Delete_All_Model();
 299   3              FPM10A_Receive_Data(12); 
C51 COMPILER V9.54   FPM10A                                                                10/21/2022 21:40:55 PAGE 6   

 300   3              
 301   3              LCD_ShowString(1,1,"====Waiting=====");
 302   3              LCD_ShowString(2,1,"successf  delete");
 303   3      
 304   3              break;
 305   3            }
 306   2           }
 307   1      }
 308          
 309          void Device_Check(void)
 310          {
 311   1          unsigned char i=0;
 312   1          FPM10A_RECEICE_BUFFER[9]=1;                  //´®¿ÚÊý×éµÚ¾ÅÎ»¿ÉÅÐ¶ÏÊÇ·ñÍ¨ÐÅÕý³£
 313   1          LCD_ShowString(2,1,"Searching");          //Éè±¸¼ÓÔØÖÐ½çÃæ                             
 314   1          LCD1602_Display(0xc0,"Docking  failure",0,16);      //Òº¾§ÏÈÏÔÊ¾¶Ô½ÓÊ§°Ü£¬Èç¹ûÖ¸ÎÆÄ£¿é²å¶ÔµÄ»°»á½«Æä¸²¸Ç
             -  
 315   1          FPM10A_Cmd_Check();                 //µ¥Æ¬»úÏòÖ¸ÎÆÄ£¿é·¢ËÍÐ£¶ÔÃüÁî
 316   1          FPM10A_Receive_Data(12);              //½«´®¿Ú½ÓÊÕµ½µÄÊý¾Ý×ª´æ
 317   1          if(FPM10A_RECEICE_BUFFER[9] == 0)         //ÅÐ¶ÏÊý¾ÝµÍµÚ9Î»ÊÇ·ñ½ÓÊÕµ½0
 318   1          {
 319   2            LCD1602_Display(0xc0,"Docking  success",0,16);  //·ûºÏ³É¹¦Ìõ¼þÔòÏÔÊ¾¶Ô½Ó³É¹¦
 320   2          }
 321   1      }
 322          
 323          
 324          
 325          
 326          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1220    ----
   CONSTANT SIZE    =    355    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     43      21
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
